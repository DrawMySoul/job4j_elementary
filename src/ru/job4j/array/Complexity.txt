int[] rsl = new int[left.length + right.length];
int leftIndex = 0;
int rightIndex = 0;
int rslIndex = 0;
Объявление переменных ни как не влияет от количества входных данных по этому для каждой строки у нас будет О(1) * 4 = О(4)

while (leftIndex < left.length && rightIndex < rsl.length) {
			if (left[leftIndex] < right[rightIndex]) {
				rsl[rslIndex++] = left[leftIndex++];
			} else {
				rsl[rslIndex++] = right[rightIndex++];
			}
		}
Цикл зависит от количества входных данных т.к нет вложенных циклов и входные данные проверяются параллельно, то цикл
равен О(n). Также присвоение элементу массива rsl с индексом rslIndex значения элемента массива left/right с индексом leftIndex/rightIndex
и инкремент переменных rslIndex leftIndex/rightIndex будет равно О(1), т.к эти действия не зависят от размера входных данных

if (leftIndex < left.length) {
			for (; leftIndex < left.length; leftIndex++) {
				rsl[rslIndex++] = left[leftIndex];
			}
		} else if (rightIndex < right.length) {
			for (; rightIndex < right.length; rightIndex++) {
				rsl[rslIndex++] = right[rightIndex];
			}
		}
Также цикл зависит от входных данных. Т.к здесь используется оператор ветвления, то возможно два исхода
1) Один из циклов будет выполнен
2) Ни один из циклов не будет выполнен
При анализе Big-O мы должны учитывать худший вариант, худшим является 1 вариант. Исходя из это мы обязаны взять О(n)
для цикла и О(1) для присвоения.

О(4 + n + 1 + n + 1) -> O(6 + 2n) -> O(n+n) убираем константы -> O(n) получаем прямую зависимость алгоритма решения от входных данных.